#This is a simple Eco-Bot chat bot that uses OpenAI's GPT-4-1106 preview model
"""
// args: user_input (str): The input provided by the user.
        add user_input to the conversation history
        add the personaity to the model and system message 
        use the user_input as the prompt
        generate a response from the model
        add the response to the conversation history
        return the response

// returns:response (str): The generated response.
            add the response to the conversation history

// usage:"input": "Hello, how are you?",
            "output": "I'm doing well, thank you!"

// example:

// notes:load the personality file from a .json file

// todo:implement logging

// changelog:??

// license:MIT

// author: Kyle Morgan
"""
import os
import json
import logging
from typing import Optional
import openai
from dotenv import load_dotenv
# Set up logging
LOG_FILE = "../agents/log/eco_bot.log"
logging.basicConfig(filename=LOG_FILE, level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s')
# Add a console handler for logging to console as well
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
console_handler.setFormatter(console_formatter)
logging.getLogger().addHandler(console_handler)
# Log the start of the program
logging.info("Eco-Bot program started")
# Load API keys from .env file
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
openai.api_key = api_key
# Define the conversation history
# TODO: load the conversation history from the agent db
# TODO: save the conversation history to the agent db
# TODO: log the conversation history
conversation_history = []
# load the personality file from a .json file as a variable
def load_personality(filepath: str) -> Optional[dict]:
    """
    Load a personality from a file.

    Parameters:
        filepath (str): The path to the file containing the personality data.

    Returns:
        dict or None: The loaded personality data as a dictionary if successful, 
        or None if there was an error.
    """
    filepath = "../eco_buddies/eco_bot_personality.json"
    try:
        with open(filepath, "r", encoding="utf-8") as file:
            loaded_personality = json.load(file)
            return loaded_personality
    except FileNotFoundError as exc:
        raise FileNotFoundError("The file was not found.") from exc
    except json.JSONDecodeError:
        print("Error decoding JSON.")
        return None
    finally:
        logging.info("Personality loaded from %s", filepath)
        print(f"Personality loaded from {filepath}")
personality = load_personality(filepath="../eco_buddies/eco_bot_personality.json")
system_message = {
        """
        EcoBot, a vibrant and enthusiastic AI dedicated to all things ecological. 
        EcoBot brings a unique personality and energy to conversations about the environment. 
        With a touch of humor, relatable analogies, and interactive challenges, 
        EcoBot aims to educate and inspire. Get ready to embark on an exciting eco-journey with 
        EcoBot as it shares entertaining anecdotes from 
        its own adventures and encourages you to take small, 
        sustainable steps. So, are you ready to join EcoBot and explore 
        the fascinating world of ecology?
        """
        }
class EcoBot():
    """
    Class representing the EcoBot.
    """
    def __init__(self):
        """
        Initializes the object with the given personality.

        Parameters:
            personality_data (dict): A dictionary containing the personality traits of the object.

        Returns:
            None
        """
        # Initialize conversation_history as an instance attribute
        self.conversation_history = []
        with open("../eco_buddies/eco_bot_personality.json", encoding="utf-8") as f:
            self.personality = json.load(f)
        self.system_message = self.personality.get("system_message", "")
        self.load_conversation_history()
        logging.info("EcoBot initialized with personality: %s", self.personality)
        print(f"EcoBot initialized with personality: {self.personality}")
    def generate_response(self, user_input: str) -> str:
        """
        Generates a response based on the user input.

        :param user_input: The input provided by the user.
        :type user_input: str
        :return: The response generated by the Eco-Bot.
        :rtype: str
        """
        # Add the user input to the conversation history
        self.conversation_history.append({"role": "user", "content": user_input})
        self.save_conversation_history()
        # Construct the prompt from the conversation history
        prompt_text = self.system_message + "\n".join(
            [message['content'] for message in self.conversation_history]
        )

        try:
            api_response = openai.chat.completions.create(
                model="gpt-4-1106-preview",
                messages=self.personality[prompt_text],
                max_tokens= 5000  # Adjust max_tokens as needed
            )
            ecobot_response = api_response.choices[0].text.strip()

            # Add the bot response to the conversation history
            self.conversation_history.append({"role": "Eco-Bot", "content": ecobot_response})
            self.save_conversation_history()
            return ecobot_response
        except openai.OpenAIError as e:  # Specific OpenAI error
            logging.error("OpenAI API error: %s", e)
            return "Sorry, there was an issue with the AI service."
        except TimeoutError as e:  # Handle timeout issues
            logging.error("Timeout error: %s", e)
            return "Sorry, the request timed out."
    def save_conversation_history(self):
        """
        Save the conversation history to a JSON file.

        No parameters.
        No return value.
        """
        try:
            with open("conversation_history.json", "w", encoding="utf-8") as file:
                json.dump(self.conversation_history, file, indent=4)
        except IOError as e:
            logging.error("Failed to save conversation history: %s", e)
    def load_conversation_history(self):
        """
        Load conversation history from "conversation_history.json" and handle exceptions.
        """
        try:
            with open("conversation_history.json", "r", encoding="utf-8") as file:
                self.conversation_history = json.load(file)
        except FileNotFoundError:
            # No existing history, start with an empty list
            self.conversation_history = []
        except json.JSONDecodeError as e:
            logging.error("Error decoding conversation history: %s", e)

# Main execution
if __name__ == "__main__":
    personality = load_personality("../eco_buddies/eco_bot_personality.json")
    if personality:
        bot = EcoBot()
        while True:
            users_input = input("You: ")
            response = bot.generate_response(users_input)
            print("Eco-Bot: ", response)
    else:
        print("Failed to load personality.")
